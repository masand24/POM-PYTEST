{"name": "test_get_login_button_click[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span id=\"app-button\" class=\"block text-black font-bold text-sm leading-[18px] tablet_s:text-xl tablet_s:leading-[30px] z-[10]\" style=\"line-height: 1; margin-bottom: 6px;\">...</span> is not clickable at point (518, 692). Other element would receive the click: <div class=\"fixed top-0 bottom-0 left-0 right-0 backdrop-blur-sm bg-[rgba(40,40,40,0.8)] z-40\" onclick=\"auth.toggleAuthModal(false)\"></div>\n  (Session info: chrome=117.0.5938.63)\nStacktrace:\n\tGetHandleVerifier [0x0120CE93+45171]\n\t(No symbol) [0x011990E1]\n\t(No symbol) [0x0108BE1D]\n\t(No symbol) [0x010C3B91]\n\t(No symbol) [0x010C268F]\n\t(No symbol) [0x010C0C7B]\n\t(No symbol) [0x010C0015]\n\t(No symbol) [0x010B856A]\n\t(No symbol) [0x010DB04C]\n\t(No symbol) [0x010B7FA6]\n\t(No symbol) [0x010DB2C4]\n\t(No symbol) [0x010EDCFA]\n\t(No symbol) [0x010DAE46]\n\t(No symbol) [0x010B675E]\n\t(No symbol) [0x010B78FD]\n\tGetHandleVerifier [0x014C5499+2897529]\n\tGetHandleVerifier [0x0150DC4B+3194411]\n\tGetHandleVerifier [0x01507A21+3169281]\n\tGetHandleVerifier [0x01296110+606960]\n\t(No symbol) [0x011A2E5C]\n\t(No symbol) [0x0119EFE8]\n\t(No symbol) [0x0119F10F]\n\t(No symbol) [0x01191807]\n\tBaseThreadInitThunk [0x76187BA9+25]\n\tRtlInitializeExceptionChain [0x7743B79B+107]\n\tRtlClearBits [0x7743B71F+191]", "trace": "self = <Tests.test_home_page.Test_Homepage object at 0x00000231270D15D0>\n\n    def test_get_login_button_click(self):\n        self.homePage = HomePage(self.driver)\n        self.homePage.click_Login()\n>       click_login = self.homePage.click_Login()\n\ntest_home_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Pages\\HomePage.py:24: in click_Login\n    self.do_click(self.LOGIN_BUTTON)\n..\\Pages\\BasePage.py:14: in do_click\n    WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator)).click()\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000231270C6A10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x76187BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7743B79B+107]\\\\n\\\\tRtlClearBits [0x7743B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span id=\"app-button\" class=\"block text-black font-bold text-sm leading-[18px] tablet_s:text-xl tablet_s:leading-[30px] z-[10]\" style=\"line-height: 1; margin-bottom: 6px;\">...</span> is not clickable at point (518, 692). Other element would receive the click: <div class=\"fixed top-0 bottom-0 left-0 right-0 backdrop-blur-sm bg-[rgba(40,40,40,0.8)] z-40\" onclick=\"auth.toggleAuthModal(false)\"></div>\nE         (Session info: chrome=117.0.5938.63)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0120CE93+45171]\nE       \t(No symbol) [0x011990E1]\nE       \t(No symbol) [0x0108BE1D]\nE       \t(No symbol) [0x010C3B91]\nE       \t(No symbol) [0x010C268F]\nE       \t(No symbol) [0x010C0C7B]\nE       \t(No symbol) [0x010C0015]\nE       \t(No symbol) [0x010B856A]\nE       \t(No symbol) [0x010DB04C]\nE       \t(No symbol) [0x010B7FA6]\nE       \t(No symbol) [0x010DB2C4]\nE       \t(No symbol) [0x010EDCFA]\nE       \t(No symbol) [0x010DAE46]\nE       \t(No symbol) [0x010B675E]\nE       \t(No symbol) [0x010B78FD]\nE       \tGetHandleVerifier [0x014C5499+2897529]\nE       \tGetHandleVerifier [0x0150DC4B+3194411]\nE       \tGetHandleVerifier [0x01507A21+3169281]\nE       \tGetHandleVerifier [0x01296110+606960]\nE       \t(No symbol) [0x011A2E5C]\nE       \t(No symbol) [0x0119EFE8]\nE       \t(No symbol) [0x0119F10F]\nE       \t(No symbol) [0x01191807]\nE       \tBaseThreadInitThunk [0x76187BA9+25]\nE       \tRtlInitializeExceptionChain [0x7743B79B+107]\nE       \tRtlClearBits [0x7743B71F+191]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1694879093903, "stop": 1694879095826, "uuid": "f15aed9a-0c40-441f-8dda-ec11e82f1846", "historyId": "8fb635a50eabe189f14ae720fe8ae2fe", "testCaseId": "ac3059c50030bd605c125edee8f295aa", "fullName": "test_home_page.Test_Homepage#test_get_login_button_click", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "suite", "value": "test_home_page"}, {"name": "subSuite", "value": "Test_Homepage"}, {"name": "host", "value": "chainani"}, {"name": "thread", "value": "10640-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_home_page"}]}