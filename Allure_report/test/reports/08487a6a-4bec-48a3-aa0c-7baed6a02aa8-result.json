{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression (//button[@id='auth-modal-button-google'] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '(//button[@id='auth-modal-button-google']' is not a valid XPath expression.\n  (Session info: chrome=116.0.5845.188); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x006A37C3+48947]\n\t(No symbol) [0x00638551]\n\t(No symbol) [0x0053C92D]\n\t(No symbol) [0x0053FD62]\n\t(No symbol) [0x0054106A]\n\t(No symbol) [0x00541110]\n\t(No symbol) [0x00569B21]\n\t(No symbol) [0x00569EFB]\n\t(No symbol) [0x00598EF2]\n\t(No symbol) [0x005850D4]\n\t(No symbol) [0x005975DA]\n\t(No symbol) [0x00584E86]\n\t(No symbol) [0x005616C7]\n\t(No symbol) [0x0056284D]\n\tGetHandleVerifier [0x008EFDF9+2458985]\n\tGetHandleVerifier [0x0093744F+2751423]\n\tGetHandleVerifier [0x00931361+2726609]\n\tGetHandleVerifier [0x00720680+560624]\n\t(No symbol) [0x0064238C]\n\t(No symbol) [0x0063E268]\n\t(No symbol) [0x0063E392]\n\t(No symbol) [0x006310B7]\n\tBaseThreadInitThunk [0x75927D59+25]\n\tRtlInitializeExceptionChain [0x771FB79B+107]\n\tRtlClearBits [0x771FB71F+191]", "trace": "self = <test.test_app.Test object at 0x00000192A50D14D0>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_login(self):\n        self.driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))\n        self.driver.get(\"https://pure.app//\")\n        self.driver.find_element(By.XPATH, \"(//span[@id='app-button'])[1]\").click()\n>       login = self.driver.find_element(By.XPATH, \"(//button[@id='auth-modal-button-google']\").is_displayed()\n\ntest_app.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000192A43E7250>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...dInitThunk [0x75927D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x771FB79B+107]\\\\n\\\\tRtlClearBits [0x771FB71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression (//button[@id='auth-modal-button-google'] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '(//button[@id='auth-modal-button-google']' is not a valid XPath expression.\nE         (Session info: chrome=116.0.5845.188); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x006A37C3+48947]\nE       \t(No symbol) [0x00638551]\nE       \t(No symbol) [0x0053C92D]\nE       \t(No symbol) [0x0053FD62]\nE       \t(No symbol) [0x0054106A]\nE       \t(No symbol) [0x00541110]\nE       \t(No symbol) [0x00569B21]\nE       \t(No symbol) [0x00569EFB]\nE       \t(No symbol) [0x00598EF2]\nE       \t(No symbol) [0x005850D4]\nE       \t(No symbol) [0x005975DA]\nE       \t(No symbol) [0x00584E86]\nE       \t(No symbol) [0x005616C7]\nE       \t(No symbol) [0x0056284D]\nE       \tGetHandleVerifier [0x008EFDF9+2458985]\nE       \tGetHandleVerifier [0x0093744F+2751423]\nE       \tGetHandleVerifier [0x00931361+2726609]\nE       \tGetHandleVerifier [0x00720680+560624]\nE       \t(No symbol) [0x0064238C]\nE       \t(No symbol) [0x0063E268]\nE       \t(No symbol) [0x0063E392]\nE       \t(No symbol) [0x006310B7]\nE       \tBaseThreadInitThunk [0x75927D59+25]\nE       \tRtlInitializeExceptionChain [0x771FB79B+107]\nE       \tRtlClearBits [0x771FB71F+191]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "start": 1694769233937, "stop": 1694769242306, "uuid": "a7fcbfa0-13f1-4300-8fa4-32abf0b0958b", "historyId": "f9c02a5f0863e17f8ad7c69c884362ab", "testCaseId": "f9c02a5f0863e17f8ad7c69c884362ab", "fullName": "test_app.Test#test_login", "labels": [{"name": "severity", "value": "blocker"}, {"name": "suite", "value": "test_app"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "chainani"}, {"name": "thread", "value": "16332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_app"}]}